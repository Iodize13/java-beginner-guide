#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [letterpaper]
* [[./index.org][*Java*]]
* 📚 สรุปเนื้อหาเรื่อง Arrays (พร้อมตัวอย่างโค้ด)
ความยาก: 💀💀💀💀
*เนื้อหาต่อจากนี้ถูกสร้างขึ้นโดย AI โดยใช้ข้อมูลจาก Presentation Slides เรื่อง Arrays*

--------------

** 📌 การสร้างและใช้งาน Array
#+begin_src java
// สร้าง Array เก็บจำนวนเต็ม 5 ค่า
int[] numbers = new int[5];

// กำหนดค่าใน Array
numbers[0] = 10;
numbers[1] = 20;
numbers[2] = 30;
numbers[3] = 40;
numbers[4] = 50;

// แสดงผลลัพธ์
for (int i = 0; i < numbers.length; i++) {
    System.out.println("Element " + i + ": " + numbers[i]);
}
#+end_src

--------------

** 📌 Array Initialization (การกำหนดค่าเริ่มต้น)
#+begin_src java
// สร้างและกำหนดค่าเริ่มต้นใน Array
int[] list = {1, 2, 3, 4, 5};

// แสดงผลลัพธ์
for (int num : list) {
    System.out.println(num);
}
#+end_src

--------------

** 📌 Frequents Errors About Array
ความยาก: 💀💀💀
หากพยายามเข้าถึง index ที่ไม่มีใน array จะเกิดข้อผิดพลาด
=ArrayIndexOutOfBoundsException=

#+begin_src java
int[] list = {1, 2, 3};
System.out.println(list[3]);  // จะเกิด ArrayIndexOutOfBoundsException
#+end_src

--------------

** 📌 Property =length= ใน Array หลายมิติ
- =A.length= ให้จำนวนแถวของ array
- =A[0].length= ให้จำนวนคอลัมน์ในแถวแรก

#+begin_src java
int[][] A = {
    {1, 2, 3, 4},
    {5, 6, 7, 8},
    {9, 10, 11, 12}
};

System.out.println("Number of rows: " + A.length);        // ผลลัพธ์: 3
System.out.println("Number of columns in row 0: " + A[0].length);  // ผลลัพธ์: 4
#+end_src

--------------

** 📌 Multi-dimensional Arrays (Array หลายมิติ)
ความยาก: 💀
#+begin_src java
// สร้าง 2D Array (3 แถว 4 คอลัมน์)
int[][] matrix = {
    {1, 2, 3, 4},
    {5, 6, 7, 8},
    {9, 10, 11, 12}
};

// แสดงผลลัพธ์
for (int i = 0; i < matrix.length; i++) {
    for (int j = 0; j < matrix[i].length; j++) {
        System.out.print(matrix[i][j] + " ");
    }
    System.out.println();
}
#+end_src

--------------

** 📌 การค้นหาค่าใน Array (Linear Search)
ความยาก: 💀
#+begin_src java
public class LinearSearch {
    public static int search(int[] array, int target) {
        for (int i = 0; i < array.length; i++) {
            if (array[i] == target) {
                return i;  // คืนค่า index ที่เจอ
            }
        }
        return -1;  // คืนค่า -1 ถ้าไม่เจอ
    }

    public static void main(String[] args) {
        int[] numbers = {10, 20, 30, 40, 50};
        int index = search(numbers, 30);
        System.out.println("Found at index: " + index);  // ผลลัพธ์: Found at index: 2
    }
}
#+end_src

--------------

** 📌 การคัดลอกค่าใน Array (Array Copy)
ความยาก: 💀
- 📋 *วิธีที่ 1: การคัดลอกแบบ Manual*
#+begin_src java
int[] source = {1, 2, 3, 4, 5};
int[] destination = new int[source.length];

// คัดลอกค่า
for (int i = 0; i < source.length; i++) {
    destination[i] = source[i];
}

// แสดงผลลัพธ์
for (int num : destination) {
    System.out.println(num);
}
#+end_src

- 📋 *วิธีที่ 2: การคัดลอกด้วย System.arraycopy()*
ความยาก: 💀
#+begin_src java
int[] source = {1, 2, 3, 4, 5};
int[] destination = new int[source.length];

// ใช้ System.arraycopy() ในการคัดลอก
System.arraycopy(source, 0, destination, 0, source.length);

// แสดงผลลัพธ์
for (int num : destination) {
    System.out.println(num);
}
#+end_src

--------------

** 📌 การเรียงลำดับค่าใน Array (Sorting)
ความยาก: 💀💀💀💀
*** ✅ การเรียงลำดับค่าใน Array ด้วย Selection Sort
ความยาก: 💀💀💀💀
#+begin_src java
public class SelectionSort {
    public static void sort(int[] array) {
        for (int i = 0; i < array.length - 1; i++) {
            int minIndex = i;
            for (int j = i + 1; j < array.length; j++) {
                if (array[j] < array[minIndex]) {
                    minIndex = j;
                }
            }
            int temp = array[minIndex];
            array[minIndex] = array[i];
            array[i] = temp;
        }
    }

    public static void main(String[] args) {
        int[] numbers = {64, 25, 12, 22, 11};
        sort(numbers);
        for (int num : numbers) {
            System.out.print(num + " ");  // ผลลัพธ์: 11 12 22 25 64
        }
    }
}
#+end_src
*** ✅ *การเรียงลำดับด้วย Insertion Sort*
ความยาก: 💀💀💀💀
#+begin_src java
public class InsertionSort {
    public static void sort(int[] array) {
        for (int i = 1; i < array.length; i++) {
            int key = array[i];
            int j = i - 1;

            while (j >= 0 && array[j] > key) {
                array[j + 1] = array[j];
                j--;
            }
            array[j + 1] = key;
        }
    }

    public static void main(String[] args) {
        int[] numbers = {5, 2, 9, 1, 5, 6};
        sort(numbers);

        for (int num : numbers) {
            System.out.print(num + " ");  // ผลลัพธ์: 1 2 5 5 6 9
        }
    }
}
#+end_src

--------------

** 📌 การค้นหาด้วย Binary Search (Binary Search)
ความยาก: 💀💀💀
#+begin_src java
public class BinarySearch {
    public static int binarySearch(int[] array, int target) {
        int low = 0;
        int high = array.length - 1;

        while (low <= high) {
            int mid = (low + high) / 2;

            if (array[mid] == target) {
                return mid;  // คืนค่า index ที่เจอ
            } else if (array[mid] < target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return -1;  // คืนค่า -1 ถ้าไม่เจอ
    }

    public static void main(String[] args) {
        int[] numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9};
        int index = binarySearch(numbers, 5);
        System.out.println("Found at index: " + index);  // ผลลัพธ์: Found at index: 4
    }
}
#+end_src

--------------

** 📌 การใช้ Arrays Utility ใน Java
ความยาก: 💀
#+begin_src java
import java.util.Arrays;

public class ArrayUtilityExample {
    public static void main(String[] args) {
        int[] numbers = {5, 2, 9, 1, 5, 6};

        // เรียงลำดับ Array
        Arrays.sort(numbers);

        // แสดงผลลัพธ์หลังเรียงลำดับ
        System.out.println(Arrays.toString(numbers));  // ผลลัพธ์: [1, 2, 5, 5, 6, 9]

        // ค้นหาด้วย Binary Search
        int index = Arrays.binarySearch(numbers, 5);
        System.out.println("Found at index: " + index);  // ผลลัพธ์: 2
    }
}
#+end_src

--------------
