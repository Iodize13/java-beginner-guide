* [[./index.org][*Java*]]
* üìö ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á Methods (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î)
‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å: üíÄüíÄ
*‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÇ‡∏î‡∏¢ AI ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Presentation Slides ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á Methods*

--------------

** üìå ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Method ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
#+begin_src java
public class MethodsExample {
    // Method ‡∏ä‡∏∑‡πà‡∏≠ add ‡∏£‡∏±‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏£‡∏ß‡∏°
    public static int add(int a, int b) {
        return a + b;
    }

    public static void main(String[] args) {
        int result = add(5, 10);
        System.out.println("Result: " + result);  // ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: 15
    }
}
#+end_src

--------------

** üìå ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÅ‡∏•‡∏∞‡∏ô‡∏¥‡∏¢‡∏≤‡∏° Method
#+begin_src java
// ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® Method
static int max(int num1, int num2);

// ‡∏Å‡∏≤‡∏£‡∏ô‡∏¥‡∏¢‡∏≤‡∏° Method
static int max(int num1, int num2) {
    if (num1 > num2) {
        return num1;
    } else {
        return num2;
    }
}
#+end_src

--------------

** üìå ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Method (Method Call)
#+begin_src java
public static void main(String[] args) {
    int i = 5;
    int j = 2;
    int result = max(i, j);
    System.out.println("Max value is: " + result);  // ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: Max value is: 5
}
#+end_src

--------------

** üìå ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå (Passing Parameters)
#+begin_src java
// Method ‡∏™‡∏•‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß
static void swap(int a, int b) {
    int temp = a;
    a = b;
    b = temp;
    System.out.println("Inside swap method: a = " + a + ", b = " + b);
}

public static void main(String[] args) {
    int m = 2;
    int n = 3;
    System.out.println("Before swap: m = " + m + ", n = " + n);
    swap(m, n);
    System.out.println("After swap: m = " + m + ", n = " + n);  // ‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
}
#+end_src

--------------

** üìå ‡∏Å‡∏≤‡∏£ Overloading Method
‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å: üíÄüíÄ
#+begin_src java
// ‡∏Å‡∏≤‡∏£ Overloading Method ‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÅ‡∏ï‡πà‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏ô‡∏¥‡∏î‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
static int max(int num1, int num2) {
    return (num1 > num2) ? num1 : num2;
}

static double max(double num1, double num2) {
    return (num1 > num2) ? num1 : num2;
}

public static void main(String[] args) {
    System.out.println(max(5, 10));        // ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: 10
    System.out.println(max(5.5, 10.1));    // ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: 10.1
}
#+end_src

--------------

** üìå Method ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á (Recursive Method)
‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å: üíÄüíÄüíÄ
#+begin_src java
// ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Factorial ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Recursive Method
static long factorial(int n) {
    if (n == 0) { // ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏´‡∏¢‡∏∏‡∏î
        return 1;
    } else {
        return n * factorial(n - 1);
    }
}

public static void main(String[] args) {
    int number = 5;
    System.out.println("Factorial of " + number + " is " + factorial(number));  // ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: 120
}
#+end_src
*** üìå Recursive Method Stopping Condition
‡∏ñ‡πâ‡∏≤ Recursive Method ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏´‡∏¢‡∏∏‡∏î ‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î *StackOverflowError*

--------------

** üìå ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Method ‡∏à‡∏≤‡∏Å‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô (API)
‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å: üíÄ
#+begin_src java
import java.util.Scanner;

public class InputExample {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        System.out.print("Enter a number: ");
        int number = input.nextInt();
        System.out.println("You entered: " + number);
        input.close();
    }
}
#+end_src
