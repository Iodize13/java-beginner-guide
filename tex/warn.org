*** üìö *Important Details with Slide References (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏Ç‡∏™‡πÑ‡∏•‡∏î‡πå)*
:PROPERTIES:
:CUSTOM_ID: important-details-with-slide-references-‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢-‡∏û‡∏£‡∏≠‡∏°‡πÇ‡∏Ñ‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏Ç‡∏™‡πÑ‡∏•‡∏î
:END:

--------------

*** ‚úÖ *1. Array Index Out of Bounds Exception*
üìå *Slide: Arrays (Slide 11)*\\
‡∏´‡∏≤‡∏Å‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á index ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô array ‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
=ArrayIndexOutOfBoundsException=

#+begin_src java
int[] list = {1, 2, 3};
System.out.println(list[3]);  // ‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î ArrayIndexOutOfBoundsException
#+end_src

--------------

*** ‚úÖ *2. Property =length= ‡πÉ‡∏ô Array ‡∏´‡∏•‡∏≤‡∏¢‡∏°‡∏¥‡∏ï‡∏¥*
:PROPERTIES:
:CUSTOM_ID: property-length-‡πÉ‡∏ô-array-‡∏´‡∏•‡∏≤‡∏¢‡∏°‡∏ï
:END:
üìå *Slide: Arrays (Slide 55)*\\
- =A.length= ‡πÉ‡∏´‡πâ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡∏Ç‡∏≠‡∏á array\\
- =A[0].length= ‡πÉ‡∏´‡πâ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å

#+begin_src java
int[][] A = {
    {1, 2, 3, 4},
    {5, 6, 7, 8},
    {9, 10, 11, 12}
};

System.out.println("Number of rows: " + A.length);        // ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: 3
System.out.println("Number of columns in row 0: " + A[0].length);  // ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: 4
#+end_src

--------------

*** ‚úÖ *3. Short-Circuit Boolean Operators (=&&= ‡πÅ‡∏•‡∏∞ =||=)*
:PROPERTIES:
:CUSTOM_ID: short-circuit-boolean-operators-‡πÅ‡∏•‡∏∞
:END:
üìå *Slide: Operations, Packages, and Programming Styles (Slide 14)*\\
‡∏ï‡∏±‡∏ß‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ö =&&= ‡πÅ‡∏•‡∏∞ =||= ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡πà‡∏≤‡πÅ‡∏ö‡∏ö *short-circuit*

#+begin_src java
int x = 0;
if (x != 0 && (10 / x) > 1) {
    System.out.println("This will not be printed.");
}
#+end_src

--------------

*** ‚úÖ *4. Recursive Method Stopping Condition*
:PROPERTIES:
:CUSTOM_ID: recursive-method-stopping-condition
:END:
üìå *Slide: Methods (Slide 27)*\\
‡∏ñ‡πâ‡∏≤ Recursive Method ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏´‡∏¢‡∏∏‡∏î ‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î *StackOverflowError*

#+begin_src java
static int factorial(int n) {
    if (n == 0) {
        return 1;
    } else {
        return n * factorial(n - 1);
    }
}
#+end_src

--------------

*** ‚úÖ *5. Parameters Passed by Value*
:PROPERTIES:
:CUSTOM_ID: parameters-passed-by-value
:END:
üìå *Slide: Methods (Slide 16-18)*\\
Java ‡∏™‡πà‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏ö‡∏ö *pass by value* ‡πÄ‡∏™‡∏°‡∏≠

#+begin_src java
public static void swap(int a, int b) {
    int temp = a;
    a = b;
    b = temp;
    System.out.println("Inside swap: a = " + a + ", b = " + b);
}

public static void main(String[] args) {
    int x = 10;
    int y = 20;
    swap(x, y);
    System.out.println("Outside swap: x = " + x + ", y = " + y);
}
#+end_src

üëâ *‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå*:

#+begin_example
Inside swap: a = 20, b = 10
Outside swap: x = 10, y = 20
#+end_example

--------------

*** ‚úÖ *6. Overloading Methods*
:PROPERTIES:
:CUSTOM_ID: overloading-methods
:END:
üìå *Slide: Methods (Slide 23-25)*\\
Java ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á Method ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ ‡∏´‡∏≤‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô

#+begin_src java
public static int add(int a, int b) {
    return a + b;
}

public static double add(double a, double b) {
    return a + b;
}
#+end_src

--------------

*** ‚úÖ *7. ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô Array ‡∏î‡πâ‡∏ß‡∏¢ =System.arraycopy()=*
:PROPERTIES:
:CUSTOM_ID: ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏î‡∏•‡∏≠‡∏Å‡∏Ñ‡∏≤‡πÉ‡∏ô-array-‡∏î‡∏ß‡∏¢-system.arraycopy
:END:
üìå *Slide: Arrays (Slide 28)*\\
Java ‡∏°‡∏µ method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô array

#+begin_src java
int[] source = {1, 2, 3, 4, 5};
int[] destination = new int[source.length];
System.arraycopy(source, 0, destination, 0, source.length);

for (int num : destination) {
    System.out.println(num);
}
#+end_src

--------------

*** ‚úÖ *8. ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô Array ‡∏î‡πâ‡∏ß‡∏¢ Selection Sort*
:PROPERTIES:
:CUSTOM_ID: ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏ö‡∏Ñ‡∏≤‡πÉ‡∏ô-array-‡∏î‡∏ß‡∏¢-selection-sort
:END:
üìå *Slide: Arrays (Slide 46)*\\
Selection Sort ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÉ‡∏ô‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô Array

#+begin_src java
public class SelectionSort {
    public static void sort(int[] array) {
        for (int i = 0; i < array.length - 1; i++) {
            int minIndex = i;
            for (int j = i + 1; j < array.length; j++) {
                if (array[j] < array[minIndex]) {
                    minIndex = j;
                }
            }
            int temp = array[minIndex];
            array[minIndex] = array[i];
            array[i] = temp;
        }
    }

    public static void main(String[] args) {
        int[] numbers = {64, 25, 12, 22, 11};
        sort(numbers);
        for (int num : numbers) {
            System.out.print(num + " ");  // ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: 11 12 22 25 64
        }
    }
}
#+end_src

--------------

*** ‚úÖ *9. Type Casting and Conversion*
:PROPERTIES:
:CUSTOM_ID: type-casting-and-conversion
:END:
üìå *Slide: Operations, Packages, and Programming Styles (Slide 22)*\\
‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å =double= ‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô =int= ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏π‡∏ç‡∏´‡∏≤‡∏¢

#+begin_src java
double value = 9.99;
int intValue = (int) value;
System.out.println(intValue);  // ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: 9
#+end_src

--------------

*** ‚úÖ *10. ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ =continue= ‡πÅ‡∏•‡∏∞ =break= ‡πÉ‡∏ô Loop*
:PROPERTIES:
:CUSTOM_ID: ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä-continue-‡πÅ‡∏•‡∏∞-break-‡πÉ‡∏ô-loop
:END:
üìå *Slide: Control (Slide 26-27)*\\
- =continue= ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡πÑ‡∏õ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà\\
- =break= ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á loop ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ

#+begin_src java
for (int i = 1; i <= 5; i++) {
    if (i == 3) {
        continue;
    }
    if (i == 4) {
        break;
    }
    System.out.println(i);
}
#+end_src

üëâ *‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå*:

#+begin_example
1
2
#+end_example

--------------

‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡πÑ‡∏´‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡πÅ‡∏à‡πâ‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö! üòä
